name: publish

on:
  push:
    branches:
      - main

permissions:
  contents: write   # needed for creating tags/releases

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true
  NuGetDirectory: ${{ github.workspace }}/nuget

defaults:
  run:
    shell: pwsh

jobs:
  create_nuget:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.version.outputs.new_version }}
      tag: ${{ steps.version.outputs.tag }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0   # fetch full history for tags

      - name: Setup .NET
        uses: actions/setup-dotnet@v3

      - name: Determine next version
        id: version
        run: |
          $lastTag = git describe --tags --abbrev=0 2>$null
          if (-not $lastTag) { $lastTag = "v0.0.0" }
          Write-Host "Last tag: $lastTag"

          # Remove "v" if present
          $version = $lastTag.TrimStart("v")

          # Split into parts
          $parts = $version.Split(".")
          $major = [int]$parts[0]
          $minor = [int]$parts[1]
          $patch = [int]$parts[2]

          # Increment patch (you could choose minor/major instead)
          $newVersion = "$major.$minor." + ($patch + 1)

          echo "new_version=$newVersion" >> $env:GITHUB_OUTPUT
          echo "tag=v$newVersion" >> $env:GITHUB_OUTPUT

      - name: Build
        run: dotnet build src/ConsoleR/ConsoleR.csproj --configuration Release

      - name: Pack
        run: dotnet pack src/ConsoleR/ConsoleR.csproj --configuration Release /p:Version=${{ steps.version.outputs.new_version }} --output ${{ env.NuGetDirectory }}

      - uses: actions/upload-artifact@v4
        with:
          name: nuget
          if-no-files-found: error
          path: ${{ env.NuGetDirectory }}/*.nupkg

  validate_nuget:
    runs-on: ubuntu-latest
    needs: [create_nuget]
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: nuget
          path: ${{ env.NuGetDirectory }}
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
      - name: Install nuget validator
        run: dotnet tool update Meziantou.Framework.NuGetPackageValidation.Tool --global
      - name: Validate package
        run: meziantou.validate-nuget-package (Get-ChildItem "${{ env.NuGetDirectory }}/*.nupkg")

  run_test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
      - name: Run tests
        run: dotnet test --configuration Release

  create_release:
    runs-on: ubuntu-latest
    needs: [validate_nuget, run_test, create_nuget]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Get version from previous step
        id: version
        run: echo "version=${{ needs.create_nuget.outputs.new_version }}" >> $env:GITHUB_OUTPUT
      - name: Create Git tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag v${{ needs.create_nuget.outputs.new_version }}
          git push origin v${{ needs.create_nuget.outputs.new_version }}
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.create_nuget.outputs.new_version }}
          release_name: Release v${{ needs.create_nuget.outputs.new_version }}
          draft: false
          prerelease: false

  deploy:
    runs-on: ubuntu-latest
    needs: [create_release]
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: nuget
          path: ${{ env.NuGetDirectory }}
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
      - name: Publish NuGet package
        run: |
          foreach($file in (Get-ChildItem "${{ env.NuGetDirectory }}" -Recurse -Include *.nupkg)) {
              dotnet nuget push $file --api-key "${{ secrets.NUGET_APIKEY }}" --source https://api.nuget.org/v3/index.json
          }
