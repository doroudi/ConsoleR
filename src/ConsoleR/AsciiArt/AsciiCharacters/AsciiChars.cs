using System.Text;

namespace ConsoleR.AsciiArt.AsciiCharacters;

internal static class AsciiChars
{
  static readonly Dictionary<char, string[]> charMaps = new()
    {
        { 'A', ["    _    ", @"   / \   ",@"  / _ \  ",@" / ___ \ ", @"/_/   \_\"] },
        { 'B', [" ____  ","| __ ) ",@"|  _ \ ","| |_) |","|____/ "]},
        { 'C', ["  ____ "," / ___|","| |    ","| |___ ",@" \____|"]},
        { 'D', [" ____  ",@"|  _ \ ",@"| | | |",@"| |_| |",@"|____/ "]},
        { 'E', [" _____ ","| ____|","|  _|  ","| |___ ","|_____|",]},
        { 'F', [" _____ ","|  ___|","| |_   ","|  _|  ","|_|    ",]},
        { 'G', ["  ____ "," / ___|","| |  _ ","| |_| |",@" \____|"  ]},
        { 'H', [" _   _ ","| | | |","| |_| |","|  _  |","|_| |_|"]},
        { 'I', [" ___ ","|_ _|"," | | "," | | ","|___|"]},
        { 'J', ["     _ ","    | |"," _  | |","| |_| |",@" \___/ "]},
        { 'K', [" _  __","| |/ /","| ' / ",@"| . \ ",@"|_|\_\"]},
        { 'L', [" _     ","| |    ","| |    ","| |___ ","|_____|"]},
        { 'M', [" __  __ ",@"|  \/  |",@"| |\/| |","| |  | |","|_|  |_|"] },
        { 'N', [" _   _ ", @"| \ | |", @"|  \| |", @"| |\  |", @"|_| \_|"] },
        { 'O', ["  ___  ","  ___  ",@" / _ \ ","| | | |","| |_| |",@" \___/ "] },
        { 'P', [" ____  ",@"|  _ \ ","| |_) |","|  __/ ","|_|    "] },
        { 'Q', ["  ___  ",@" / _ \ ","| | | |","| |_| |",@" \__\_\"] },
        { 'R', [" ____  ",@"|  _ \ ","| |_) |","|  _ < ",@"|_| \_\"] },
        { 'S', [" ____  ","/ ___| ",@"\___ \ "," ___) |","|____/ "] },
        { 'T', [" _____ ","|_   _|","  | |  ","  | |  ","  |_|  "] },
        { 'U', [" _   _ ","| | | |","| | | |","| |_| |",@" \___/ "] },
        { 'V', ["__     __",@"\ \   / /",@" \ \ / / ",@"  \ V /  ",@"   \_/   "] },
        { 'W', ["__        __",@"\ \      / /",@" \ \ /\ / / ",@"  \ V  V /  ",@"   \_/\_/   "] },
        { 'X', ["__  __",@"\ \/ /",@" \  / ",@" /  \ ",@"/_/\_\"] },
        { 'Y', ["__   __",@"\ \ / /",@" \ V / ","  | |  ","  |_|  "] },
        { 'Z', [" _____","|__  /","  / / "," / /_ ","/____|"] },
        { 'a', ["       ","  __ _ "," / _` |","| (_| |",@" \__,_|"] },
        { 'b', [" _     ","| |__  ",@"| '_ \ ","| |_) |","|_.__/ "] },
        { 'c', ["      ","  ___ "," / __|","| (__ ",@" \___|"] },
        { 'd', ["     _ ","  __| |"," / _` |","| (_| |",@" \__,_|"] },
        { 'e', ["      ","  ___ ",@" / _ \","|  __/",@" \___|"] },
        { 'f', ["  __ "," / _|","| |_ ","|  _|","|_|  "] },
        { 'g', ["       ","  __ _ "," / _` |","| (_| |",@" \__, |"," |___/ "] },
        { 'h', [" _     ","| |__  ",@"| '_ \ ","| | | |","|_| |_|"] },
        { 'i', [" _ ", "(_)", "| |", "| |", "|_|"] },
        { 'j', ["   _ ","  (_)","  | |"," _/ |","|__/ "] },
        { 'k', [" _    ","| | __","| |/ /","|   < ",@"|_|\_\"] },
        { 'l', [" _ ","| |","| |","| |","|_|"] },
        { 'm', ["           "," _ __ ___  ",@"| '_ ` _ \ ","| | | | | |","|_| |_| |_|"] },
        { 'n', ["       "," _ __  ",@"| '_ \ ","| | | |","|_| |_|"] },
        { 'o', ["       ", "  ___  ", @" / _ \ ", "| (_) |", @" \___/ "] },
        { 'p', ["       "," _ __  ",@"| '_ \ ","| |_) |","| .__/ ","|_|    "] },
        { 'q', ["       ","  __ _ ", " / _` |", "| (_| |", @" \__, |", "    |_|"] },
        { 'r', ["      ", " _ __ ", "| '__|", "| |   ", "|_|   "] },
        { 's', ["     "," ___ ","/ __|",@"\__ \","|___/"] },
        { 't', [" _   ", "| |_ ", "| __|", "| |_ ", @" \__|"] },
        { 'u', ["       "," _   _ ","| | | |","| |_| |",@" \__,_|"] },
        { 'v', ["       ","__   __",@"\ \ / /",@" \ V / ",@"  \_/  "] },
        { 'w', ["          ","__      __",@"\ \ /\ / /",@" \ V  V / ",@"  \_/\_/  "] },
        { 'x', ["      ","__  __",@"\ \/ /"," >  < ",@"/_/\_\"] },
        { 'y', ["       "," _   _ ","| | | |","| |_| |",@" \__, |"," |___/ "] },
        { 'z', ["   "," ____","|_  /"," / / ","/___|"] }
    };

  public static string GetAsciiArt2(string text)
  {
    var sb = new StringBuilder();
    for (int line = 0; line < 6; line++) // Assuming 6-line tall characters
    {
      foreach (char c in text)
      {
        if (charMaps.TryGetValue(c, out string[] charArt))
        {
          if (charArt.Length > line)
            sb.Append(charArt[line]);
          else
            sb.Append(new string(' ', charArt[line - 1].Length));
        }
        else
        {
          // If character not found, use a default (like space or ?)
          sb.Append(new string(' ', 7));
        }
      }
      sb.AppendLine(); // New line after each art line
    }
    return sb.ToString();

    // foreach (var ch in text.ToUpper().ToCharArray())
    // {
    //   if (charMaps.TryGetValue(ch, out var asciiArt))
    //   {
    //     resultList.AddRange(asciiArt);
    //   }
    //   else
    //   {
    //     resultList.Add(new string(' ', 7)); // Default space for unsupported characters
    //   }
    // }

    // return ToSingleLine(resultList);
  }

}
